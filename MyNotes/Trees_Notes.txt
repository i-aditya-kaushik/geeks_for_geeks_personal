Trees are used to represent hirarchy like Subfolders inside folders.
Top nodes are called root. The leaf is the last branch
Children and parent
Degree of nodes: No of children of a particular node

Application of Trees:
    hirarchical data representation
    Folder structure
    XML/HTML Content
    In OOP
    BST
    Binary Heap
    B and B+ Trees
    Spanning and Shortest path Tree
    Parse Tree
    Trie: Dictionary
    Suffix Tree: Pattern search
    Binary Index Tree and Segment Tree

Binary Tree:
    At most 2 children of a node
    max(degree) = 2

Tree Traversal:
    Breadth First 

            10
           /  \
          20  30
         /  \   \
        40  50   60

    BFS: 10, 20 , 30, 40 ,50 ,60

    Depth First: Left comes before right
            10
           /  \
          20  30        
        
        For the above tree:
        In order: Left then root then right: 20 10 30
        Pre-order: Root then left then right: 10 20 30
        Post-order: Left then right then root: 20 30 10

            10
           /  \
          20  30
         /  \   \
        40  50   60
           /  \
          70  80

        In order: 40 20 70 50 80 10 30 60
        Pre order: 10 20 40 50 70 80 30 60
        Post order: 40 70 80 50 20 60 30 10

    Time : Theta(n)
    Space: Theta(h) where h is height of tree 
    void inorder(Node *root){
        if(root!=NULL){
            inorder(root->left);
            cout<<root->key;
            inorder(root->right);
        }
    }
    void preorder(Node *root){
        if(root!=NULL){
            cout<<root->key;
            preorder(root->left);
            preorder(root->right);
        }
    }
    void postorder(Node *root){
        if(root!=NULL){
            postorder(root->left);
            postorder(root->right);
            cout<<root->key;
        }
    }
    
    Level Order Traversal or Breadth First search or BFS:
        Queue structure:
        Refer code in picture
        Time Complexity: Theta(n)
        Space: O(n) or Theta(w) where w is width

        There can be aux space which is Theta(1) as well as Aux Space which is Theta(n)

          1
         /      Aux space: Theta(1)
        2
       /
      3    


            10
           /  \
          20  30     Aux Space: Theta(n) 
          /    \
         10    10
        /  \   |  \
       20  30  20  30

    Traversal by Line by Line BFS:
        Enqueue NULL when we reach one end
        Next time when we pop, when we come to NULL, we cout<<endl
        Refer code for reference

        Method 2:
            Instead of Enqueuing NULL, directly endl when we end one loop
    
    Size of Binary Tree:
        Recursive: return 1+ getSize(root->left) + getSize(root->right)
        Time Complexity: O(N)
        Space Complexity: O(h)
    
    int getMax(Node* root){
        if root==NULL{
            return INT_MIN;
        }
        else{
            return Math.max(root->key,Math.max(root->right,root->left))
        }
    }



        

