Trees are used to represent hirarchy like Subfolders inside folders.
Top nodes are called root. The leaf is the last branch
Children and parent
Degree of nodes: No of children of a particular node

Application of Trees:
    hirarchical data representation
    Folder structure
    XML/HTML Content
    In OOP
    BST
    Binary Heap
    B and B+ Trees
    Spanning and Shortest path Tree
    Parse Tree
    Trie: Dictionary
    Suffix Tree: Pattern search
    Binary Index Tree and Segment Tree

Binary Tree:
    At most 2 children of a node
    max(degree) = 2

Tree Traversal:
    Breadth First 

            10
           /  \
          20  30
         /  \   \
        40  50   60

    BFS: 10, 20 , 30, 40 ,50 ,60

    Depth First: Left comes before right
            10
           /  \
          20  30        
        
        For the above tree:
        In order: Left then root then right: 20 10 30
        Pre-order: Root then left then right: 10 20 30
        Post-order: Left then right then root: 20 30 10

            10
           /  \
          20  30
         /  \   \
        40  50   60
           /  \
          70  80

        In order: 40 20 70 50 80 10 30 60
        Pre order: 10 20 40 50 70 80 30 60
        Post order: 40 70 80 50 20 60 30 10

    Time : Theta(n)
    Space: Theta(h) where h is height of tree 
    void inorder(Node *root){
        if(root!=NULL){
            inorder(root->left);
            cout<<root->key;
            inorder(root->right);
        }
    }
    void preorder(Node *root){
        if(root!=NULL){
            cout<<root->key;
            preorder(root->left);
            preorder(root->right);
        }
    }
    void postorder(Node *root){
        if(root!=NULL){
            postorder(root->left);
            postorder(root->right);
            cout<<root->key;
        }
    }
    
    Level Order Traversal or Breadth First search or BFS:
        Queue structure:
        Refer code in picture
        Time Complexity: Theta(n)
        Space: O(n) or Theta(w) where w is width

        There can be aux space which is Theta(1) as well as Aux Space which is Theta(n)

          1
         /      Aux space: Theta(1)
        2
       /
      3    


            10
           /  \
          20  30     Aux Space: Theta(n) 
          /    \
         10    10
        /  \   |  \
       20  30  20  30

    Traversal by Line by Line BFS:
        Enqueue NULL when we reach one end
        Next time when we pop, when we come to NULL, we cout<<endl
        Refer code for reference

        Method 2:
            Instead of Enqueuing NULL, directly endl when we end one loop
    
    Size of Binary Tree:
        Recursive: return 1+ getSize(root->left) + getSize(root->right)
        Time Complexity: O(N)
        Space Complexity: O(h)
    
    int getMax(Node* root){
        if root==NULL{
            return INT_MIN;
        }
        else{
            return Math.max(root->key,Math.max(root->right,root->left))
        }
    }
    Space Complexity: O(h)
    Time Complexity: O(n)

    When we do iterative solution, using queue, the space Complexity is O(w).

height of Binary tree:
    int height(Node *tree){
        if(root==NULL){
            return 0;
        }
        else{
            return(1+ Math.max(height(root->left), height(root->right)));
        }
    }

    O(n): Time Complexity
    O(h): Space Complexity

    When we do iterative solution, using queue, the space Complexity is O(w).

Print Nodes at k distance:
    if(k==0){
        cout<<root->key;
    }
    else{
        printkDist(root->left,k-1)
        printkDist(root->right,k-1)
    }

    Best case: Theta(1)
    Worst case: Theta(n)
    O(h) for space Complexity

Print Left view:
    static variable maxlevel = 0
    if level is greater than the maxlevel, we print it and update the maxlevel
    Since the node reaches the leftmost node first, we will always print the leftmost level
    O(n),O(h)

    iterative solution:
        We only print the first element of the queue
        Then we pop the rest 
        O(n),O(w)
    
Check if tree follows children sum property
    Refer code for reference

Check for balanced bin tree:
    if(root==NULL){
        return(0);
    }
    lh= balanced(root->left);
    if(lh==-1){
        return(-1);
    }
    rh = balanced(root->right);
    if(rh==-1){
        return(-1);
    }
    if(abs(lh-rh)>1){
        return -1;
    }
    else{
        return max(lh,rh)+1;
    }
        
Maximum width of tree:
    Do BFS and add 1 when you pop each item. AFter doing that, simply compare the maximum and return the max value

Convert tree to doubly linked list:
    Simply follow the inorder traversal and maintain a doubly linked list as well
    Refer picture for code

Binary tree from inorder to preorder : Read it

Spiral Form:
    Deque implementation and BFS

Diameter of Binary Tree:
    Diameter of node is length of lh + 1+ length of rh: Naive solution
    Better solution:
        unordered_map<int,int> but extra space, O(n)
    Best solution:
        if(root==NULL){
            return(0);
        }
        int lh = height(root->left);
        int rh = height(root->right);
        res = max(res,lh+rh+1)
        return 1+max(lh,rh)

Lowest Common Ancestor:
    THis problem is also used to find the distance between 2 nodes 

Burn the binary tree from a leaf
    We can use the LCA and find height of the other side.. Also, we can use the diameter of the tree and do the same
    Refer code for reference

Count Nodes in a Complete Binary Tree:
Theta n
    if(root==NULL) return 0;
    else{
        return 1+ func(root->left)+func(root->right);
    }

Efficient solution:
    Begin with a root.. get the left height and right height and then compare.. if both are same, then do 2^lh - 1 to get the height.. else Recursively go through until it is 
    and then follow the same path
    Refer Code for reference
    Best case:  Theta(h)
    Worst case:
        T(n) = T(2n/3) + Theta(h)
        O(log(n)*log(n))
    
Serialization and Deseriazation of Binary Tree:
    Applications:
        Used in GFG where the test cases areconsidered to be serialization.. and when the user wants to run the test cases, that is Deseriazation
        Sending data over the network is done using serialization and when we get the data, we use Deseriazation
    Use a special marker for null (say -1)
    FOr serialization, do pre order traversal if root->left becomes null, store -1 in vector 
    For Deseriazation:
        say we got the following after serialization:
            10 20 -1 -1 30 -1 -1

            Note we did using pre order:
            
            Therefore, we get the following tree

                 10
                /  \
               20  30 

    implementation of serialization and Deseriazation:
        For serialization:
        Traverse through using the preorder 

        if the root becomes null push -1

        Deseriazation:
            Refer code for reference
            Serialization: Theta(n), Theta(n)
            Deseriazation: Theta(n)