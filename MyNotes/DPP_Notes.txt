Optimization over plain recursion..
Done with the help of:
    1. Memoization(Top Down)
    2. Tabulation(Bottom Up)

Applications:
    1. Bellman Ford Algorithm (Shortest Path)
    2. Floyd Warhall Algo 
    3. Diff Utility*(LCS)
    4. Edit Distance
    5. 0-1 Knapsack 

Memoization:
    int memo[n+1] = [-1...-1]
    int fib(int n){
        if memo[n]==-1{
            int res;
            if(n==0 or n==1){
                res = n
            }
            else res = fib(n-1) + fib(n-2)
            memo[n] = res;
        }
        return memo[n];
    }

Tabulation:
    int fib(int n){
        int f[n+1];
        f[0]=0, f[1]=1;
        for(int i=2;i<=n;i++){
            f[i]= f[i-1]+f[i-2]
        }
        return f[n];
    }

Longest Common Subsequence:
    Memoization:
        int memo[m+1][n+1] = {-1,-1,-1,....-1}
        int lcs(string s1, string s2, int m,int n){
            if(memo[m][n]==-1){
                return memo[m][n];
            }
            if(m==0 or n==0){
                memo[m][n]= 0
            }
            if(s1[m-1]==s2[n-1]){
                memo[m][n]= 1+ lcs(s1,s2,m-1,n-1)
            }
            else{
                memo[m][n]= max(lcs(s1,s2,m-1,n),lcs(s1,s2,m,n-1));
            }
            return memo[m][n];
        }
    
    Tabulation:
        Bottom Up 

        int lcs(string s1,string s2){
            int m= s1.length(), n = s2.length();
            int dp[m+1][n+1];
            for(int i=0;i<=m;i++){
                dp[i][0] = 0;
            }
            for(int j=0;j<=n;j++){
                dp[0][j] = 0;
            }
            for(int i=1;i<=m;i++){
                for(int j=1;j<=n;j++){
                    if(s1[i-1]==s2[j-1]) dp[i][j] = 1+dp[i-1][j-1]
                    else dp[i][j] = max(dp[i-1][j], dp[i][j-1])
                }
            }
            return dp[m][n];
        }

    Similar problems: Coin CHange problem